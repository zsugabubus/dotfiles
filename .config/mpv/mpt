#!/usr/bin/luajit
local ffi = require('ffi')
local uv = require('luv')
local json = require('cjson')
local curs = ffi.load('ncursesw')

ffi.cdef([[
enum { LC_ALL = 6 };
char *setlocale(int, const char *);
]])

ffi.C.setlocale(ffi.C.LC_ALL, '')

ffi.cdef([[
typedef struct WINDOW WINDOW;

enum {
	A_NORMAL = 0,
	A_REVERSE = 1 << 18,
	A_BOLD = 1 << 21,
};

extern int LINES, COLS;

WINDOW *initscr(void);
WINDOW *newwin(int, int, int, int);
char const *keyname(int);
int curs_set(int);
int doupdate(void);
int endwin(void);
int getcurx(const WINDOW *);
int getmaxx(const WINDOW *);
int getmaxy(const WINDOW *);
int keypad(WINDOW *win, bool);
int mvwin(WINDOW *, int, int);
int nodelay(WINDOW *, bool);
int noecho(void);
int waddnstr(WINDOW *, const char *, int);
int wattr_set(WINDOW *, uint32_t, short, void *);
int wclrtoeol(WINDOW *);
int wgetch(WINDOW *);
int wmove(WINDOW *, int, int);
int wnoutrefresh(WINDOW *);
int wresize(WINDOW *, int, int);
int wscrl(WINDOW *, int);
]])

ffi.metatype('WINDOW', {
	__index = {
		attr = function(self, attrs, pair)
			return curs.wattr_set(self, attrs, pair, nil)
		end,
		clrtoeol = curs.wclrtoeol,
		cols = curs.getmaxx,
		cursor = curs.wmove,
		getch = curs.wgetch,
		keypad = curs.keypad,
		lines = curs.getmaxy,
		move = curs.mvwin,
		nodelay = curs.nodelay,
		put = function(self, s)
			return curs.waddnstr(self, s, #s)
		end,
		putf = function(self, s, ...)
			return self:put(string.format(s, ...))
		end,
		refresh = curs.wnoutrefresh,
		resize = curs.wresize,
		scroll = curs.wscrl,
		x = curs.getcurx,
	},
})

local Client = {}
Client.__index = Client

function Client.new(cls, ipc_server)
	local self = setmetatable({
		ipc_server = ipc_server,
		pipe = uv.new_pipe(),
		event_handlers = {},
	}, cls)

	self.uv_cb = function(err)
		if err then
			return self:close()
		end
	end

	return self
end

function Client:close()
	self.pipe:close()
end

function Client:request(command, on_reply)
	self.request_id = self.request_id + 1

	local request = {
		request_id = self.request_id,
		command = command,
		async = true,
	}

	self.reply_handlers[self.request_id] = on_reply

	self.pipe:write({ json.encode(request), '\n' }, self.uv_cb)
end

function Client:on(name, on_event)
	self.event_handlers[name] = on_event
end

function Client:connect(on_connect)
	self.request_id = 0
	self.reply_handlers = {}
	self.pipe:connect(self.ipc_server, function(err)
		if err then
			return on_connect(self, err)
		end

		local buffer = ''
		self.pipe:read_start(function(err, data)
			if not data then
				self:close()
				return
			end

			for line, eol in string.gmatch(buffer .. data, '([^\n]*)(\n?)') do
				if eol == '' then
					buffer = line
					break
				end

				local msg = json.decode(line)
				if msg.event then
					local handler = self.event_handlers[msg.event]
					if handler then
						handler(self, msg)
					end
				else
					local handler = self.reply_handlers[msg.request_id]
					if handler then
						handler(self, msg)
					end
				end
			end
		end)

		return on_connect(self)
	end)
end

do
	local signal = uv.new_signal()
	signal:unref()
	signal:start('sigint', function()
		uv.stop()
	end)
end

do
	local signal = uv.new_signal()
	signal:unref()
	signal:start('sigpipe', function() end)
end

local client
local local_bindings
local props = {
	volume = 0,
	speed = 1,
	playlist = {},
	['playlist-count'] = 0,
	['playlist-pos-1'] = 0,
	['term-osd-bar-chars'] = '[-+-]',
}

local scrolloff = 5
local top = 0
local shellout
local stdin = uv.new_poll(0)
stdin:unref()
local sigwinch = uv.new_signal()
sigwinch:unref()

curs.initscr()
curs.noecho()
curs.curs_set(0)
local playlist_win = curs.newwin(1, 0, 0, 0)
local status_win = curs.newwin(1, 0, 0, 0)
status_win:nodelay(true)
status_win:keypad(true)

local function render_playlist()
	local win = playlist_win
	local lines = win:lines()
	local pos = props['playlist-pos-1']
	local playlist = props.playlist

	local old_top = top
	top = math.min(top, pos - scrolloff)
	top = math.max(top, pos + scrolloff - lines + 1)
	top = math.min(top, #playlist - lines + 1)
	top = math.max(1, top)

	win:scroll(top - old_top)

	local bottom = math.min(top + lines - 1, #playlist)
	for i = 0, bottom - top do
		local entry = playlist[top + i]
		win:attr(curs.A_NORMAL, 0)
		win:cursor(i, 0)
		win:put(' ')
		if top + i == pos then
			win:attr(curs.A_BOLD + curs.A_REVERSE, 0)
		end
		win:put(entry.filename)
		win:clrtoeol()
	end

	win:attr(curs.A_NORMAL, 0)
	for i = bottom - top + 1, lines - 1 do
		win:cursor(i, 0)
		win:put('~')
		win:clrtoeol()
	end

	win:refresh()
end

local function human_time(sec)
	local sign = sec < 0 and '-' or ''
	sec = math.abs(sec)
	return string.format('%s%02d:%02d', sign, math.floor(sec / 60), sec % 60)
end

local function render_status()
	local win = status_win

	if not client then
		win:cursor(0, 0)
		win:attr(curs.A_BOLD, 0)
		win:put('Disconnected')
		win:clrtoeol()
		win:refresh()
		return
	end

	local pct = (props.duration or 0) ~= 0
			and (props['time-pos'] or 0) / props.duration
		or 0

	win:cursor(0, 0)
	win:attr(curs.A_BOLD, 0)
	if props.pause then
		win:put('(Paused) ')
	end
	if props.mute then
		win:put('(Muted) ')
	end

	win:attr(curs.A_NORMAL, 0)
	win:putf(
		'[%d/%d] %s / %s (%2d%%) ',
		props['playlist-pos-1'],
		props['playlist-count'],
		human_time(props['time-pos'] or 0),
		human_time(props.duration or 0),
		100 * pct
	)
	if props.speed ~= 1 then
		win:putf('x%.2f ', props.speed)
	end
	win:putf('Volume: %d%% ', props.volume)

	local left, left_space, indicator, right_space, right =
		string.match(props['term-osd-bar-chars'], '^(.)(.)(.)(.)(.)$')
	local x0, x1 = win:x() + 1, win:cols() - 1
	local w = x1 - x0
	local sp0 = math.floor(w * pct)
	local sp1 = w - 1 - sp0
	win:put(left)
	win:put(string.rep(left_space, sp0))
	win:put(indicator)
	win:put(string.rep(right_space, sp1))
	win:put(right)

	win:refresh()
end

local function render(full)
	if shellout then
		return
	end

	if full then
		playlist_win:move(0, 0)
		playlist_win:resize(curs.LINES - 1, curs.COLS)

		status_win:move(curs.LINES - 1, 0)
		status_win:resize(1, curs.COLS)

		render_playlist()
	end
	render_status()

	curs.doupdate()
end

local function set_prop(name, data)
	if props[name] ~= data then
		props[name] = data
		render(name == 'playlist' or name == 'playlist-pos-1')
	end
end

local function set_client(client_)
	client = client_
	render(false)

	if not client then
		return
	end

	client:on('property-change', function(_, event)
		local name = event.name
		local data = event.data

		if name == 'playlist-count' then
			client:request({ 'get_property', 'playlist' }, function(_, msg)
				set_prop('playlist', msg.data)
			end)
		end

		if name == 'time-pos' and data then
			data = math.floor(data)
		end
		set_prop(name, data)
	end)

	for i, name in ipairs({
		'duration',
		'mute',
		'pause',
		'playlist-count',
		'playlist-pos-1',
		'speed',
		'term-osd-bar-chars',
		'time-pos',
		'volume',
		'working-directory',
	}) do
		client:request({ 'observe_property', i, name })
	end
end

local function mpv_keyname(key)
	if key == '^[' then
		return 'ESC'
	elseif key == '^I' then
		return 'TAB'
	elseif key == 'KEY_DC' then
		return 'DEL'
	elseif key == 'KEY_SDC' then
		return 'Shift+DEL'
	elseif key == 'KEY_IC' then
		return 'INSERT'
	end

	local x = string.match(key, '^^([A-Z])$')
	if x then
		return 'Ctrl+' .. string.lower(x)
	end

	local x = string.match(key, 'KEY_([A-Z]+)')
	if x then
		return x
	end

	return key
end

local function enter_shell()
	shellout = true
	stdin:stop()
	sigwinch:stop()
	curs.endwin()
end

local function enter_program()
	shellout = false
	stdin:start('r', function(err)
		if err then
			stdin:close()
			return
		end

		local c = status_win:getch()
		local key = ffi.string(curs.keyname(c))
		local key = mpv_keyname(key)

		local handler = local_bindings[key]
		if handler then
			handler()
			return
		end

		if client then
			client:request({ 'keypress', key })
		end
	end)
	sigwinch:start('sigwinch', function()
		curs.endwin()
		curs.doupdate()
		render(true)
	end)
	render(true)
end

local function fzf_playlist()
	enter_shell()

	local stdin = uv.new_pipe()
	local stdout = uv.new_pipe()
	local reply = ''

	local process
	process = uv.spawn('fzf', {
		args = { '--read0', '--print0' },
		stdio = { stdin, stdout, 2 },
	}, function(code, signal)
		process:close()
		enter_program()

		if code == 0 then
			local index = tonumber(string.match(reply, '^%d+'))
			if client then
				client:request({ 'playlist-play-index', index - 1 })
			end
		end
	end)

	local buf = require('string.buffer').new()
	for i, entry in ipairs(props.playlist) do
		buf:put(tostring(i), '\t', entry.filename, '\0')
	end
	stdin:write(buf:tostring())
	stdin:shutdown(function()
		stdin:close()
	end)

	stdout:read_start(function(err, data)
		if data then
			reply = reply .. data
		else
			stdout:close()
		end
	end)
end

local function editor_playlist()
	enter_shell()

	local filename = os.tmpname()
	local f = io.open(filename, 'w')
	local cwd = props['working-directory'] .. '/'
	for _, entry in ipairs(props.playlist) do
		local path = entry.filename
		if not string.find(path, '://') and string.sub(path, 1, 1) ~= '/' then
			path = cwd .. path
		end
		f:write(path, '\n')
	end
	f:close()

	local function cleanup()
		os.remove(filename)
	end

	local process
	process = uv.spawn(os.getenv('EDITOR') or 'vim', {
		args = { string.format('+%d', props['playlist-pos-1']), '--', filename },
		stdio = { 0, 1, 2 },
	}, function(code, signal)
		process:close()
		enter_program()

		if code ~= 0 then
			cleanup()
			return
		end

		if client then
			client:request({ 'loadlist', filename }, cleanup)
		end
	end)
end

local_bindings = {
	q = function()
		uv.stop()
	end,
	['/'] = fzf_playlist,
	['Ctrl+w'] = editor_playlist,
}

local function connect_to_best_client(clients, on_connect)
	if #clients == 0 then
		return on_connect()
	end

	local best
	local best_pause

	local n = #clients
	local function step()
		n = n - 1
		if n == 0 then
			for _, client in ipairs(clients) do
				if client ~= best then
					client:close()
				end
			end
			return on_connect(best)
		end
	end

	for _, client in ipairs(clients) do
		client:connect(function(self, err)
			if err then
				return step()
			end

			self:request({ 'get_property', 'pause' }, function(self, msg)
				local pause = msg.data
				if not best or (best_pause and not pause) then
					best, best_pause = self, pause
				end
				return step()
			end)
		end)
	end
end

do
	local clients = {}
	for i, path in ipairs(arg) do
		table.insert(clients, Client:new(path))
	end
	connect_to_best_client(clients, function(client)
		if client then
			set_client(client)
		end
	end)
end

enter_program()
uv.run()
enter_shell()
