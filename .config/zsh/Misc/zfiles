#autoload

emulate -L zsh

zmodload -F zsh/stat b:zstat
zmodload zsh/curses
zmodload zsh/system
autoload -U colors && colors

integer -g __zfiles_scrolloff=5
integer -g __zfiles_do_stat=1 # 0=no; 1=yes; 2=yes+display
integer -g __zfiles_glob_dots=0

integer -g __zfiles_active # 0=no; 1=list; 2=vared

typeset -g __zfiles_PWD
typeset -ga __zfiles_globfiles __zfiles_files
typeset -ga __zfiles_selection
integer -g __zfiles_lines
integer -g __zfiles_rendered_top __zfiles_cur __zfiles_top __zfiles_bottom

typeset -gA __zfiles_dir_selection

typeset -g __zfiles_last_{cmd,f,f_forward}

typeset -gA __zfiles_{stat,icon,color,comment}_cache
typeset -gA __zfiles_{icons,colors}

typeset -grA __ZFILES_CONTROL_KEYMAP=(
	t tab
	n cr
)

typeset -r __ZFILES_DEFAULT_GLOB='*(N-/) *(N^-/)'

typeset -g __zfiles_glob=$__ZFILES_DEFAULT_GLOB __zfiles_filter=

typeset -g __zfiles_mode=n

typeset -gA __zfiles_bindings_n=(
	[gg]='__zfiles_select_scroll 0 1'
	[G]='__zfiles_select_scroll 0 $#__zfiles_files'
	[k]='__zfiles_select_scroll 1 -1'
	[j]='__zfiles_select_scroll 1 +1'
	['\<C-U\>']='__zfiles_select_scroll_half -1'
	['\<C-D\>']='__zfiles_select_scroll_half +1'
	['\<C-B\>']='__zfiles_scroll_select_half -2'
	['\<C-F\>']='__zfiles_scroll_select_half +2'
	[S]='(( __zfiles_do_stat=(__zfiles_do_stat + 1) % 3 )); __zfiles_dirty_prompt=1'
	[s]='__zfiles-stat ZFile'
	['\<C-E\>']='__zfiles_scroll_select 1 +1'
	['\<C-Y\>']='__zfiles_scroll_select 1 -1'
	[h\|H]='cd ..'
	['\<cr\>']='__zfiles_open ZFile'
	[l]='__zfiles_open ZFile'
	['\<C-L\>']='__zfiles_chpwd; zcurses refresh; __zfiles_dirty_prompt=1; __zfiles_render'
	[zt]='__zfiles_scroll_select 0 $(( __zfiles_cur - __zfiles_scrolloff ))'
	[zz]='__zfiles_scroll_select 0 $(( __zfiles_cur - __zfiles_lines / 2 ))'
	[zb]='__zfiles_scroll_select 0 $(( __zfiles_cur + __zfiles_scrolloff - __zfiles_lines ))'
	[t]='__zfiles_toggle ZFile'
	[m]='__zfiles_cmd "mkdir "'
	[e]='__zfiles_cmd "$EDITOR "'
	['~']='__zfiles_cmd cd "~"'
	['-']='__zfiles_cmd cd "~-"'
	[c]='__zfiles_cmd cd ${(qD)PWD}/'
	[':']='__zfiles_cmd $__zfiles_last_cmd; __zfiles_last_cmd=$REPLY'
	['r']='eval $__zfiles_last_cmd'
	['\]']='__zfiles_bracket 1'
	['\[']='__zfiles_bracket 0'
	['f?']='__zfiles_f 1 1 ${__zfiles_input#f}'
	['F?']='__zfiles_f 1 0 ${__zfiles_input#F}'
	[';']='__zfiles_f 0 $__zfiles_last_f_forward $__zfiles_last_f'
	[',']='__zfiles_f 0 $(( __zfiles_last_f_forward^1 )) $__zfiles_last_f'
	['+']='__zfiles_tag "+"'
	['-']='__zfiles_tag "-"'
	['=']='__zfiles_tag "="'
	[v]='__zfiles_shellout vidir ZFiles'
	[V]='__zfiles_shellout vidir ZAllFiles'
	[p]='pushd "$PWD"'
	[q]='return'
	['\<C-\[\>']='return'
	[/]='__zfiles_filter= && __zfiles_update_files f && __zfiles_set_mode t'
	[g.]='(( __zfiles_glob_dots^=1 )); __zfiles_update_files g'
	[g\\*]='__zfiles_glob=* && __zfiles_set_glob'
	[ge]='__zfiles_set_glob'
	[ga]="__zfiles_glob=${(q)__ZFILES_DEFAULT_GLOB} && __zfiles_update_files g"
	[gr]='__zfiles_glob=*** && __zfiles_update_files g'
	[gd]='__zfiles_glob=*(-/) && __zfiles_update_files g'
	[gD]='__zfiles_glob=**(-/) && __zfiles_update_files g'
	[gf]='__zfiles_glob=*(^-/) && __zfiles_update_files g'
	[gF]='__zfiles_glob=**(^-/) && __zfiles_update_files g'
	[gm]='__zfiles_glob=*(om) && __zfiles_update_files g'
	[gM]='__zfiles_glob=**(om) && __zfiles_update_files g'
	[gs]='__zfiles_glob="*(-/) *(^-/oL)" && __zfiles_update_files g'
	[gS]='__zfiles_glob="**(-/) **(^-/oL)" && __zfiles_update_files g'
)

typeset -gA __zfiles_bindings_t=(
	['\<C-\[\>']='__zfiles_filter= && __zfiles_update_files f && __zfiles_set_mode n'
	['\<C-[KU]\>']='__zfiles_filter= && __zfiles_update_files f'
	['\<C-W\>']='__zfiles_filter=${${${:-" $__zfiles_filter"}% *}#?} && __zfiles_update_files f'
	['\<C-H\>']='__zfiles_filter=${__zfiles_filter%?} && __zfiles_update_files f'
	['/']='__zfiles_open ZFile'
	['\<cr\>|L']='__zfiles_filter= && __zfiles_set_mode n && __zfiles_open ZFile && __zfiles_update_files f'
	[H]='cd ..'
	[T]='__zfiles_selection=( $__zfiles_files )'
	['[a-z0-9*]']='__zfiles_filter+=$__zfiles_input && __zfiles_update_files f'
	[.]='__zfiles_filter+=*$__zfiles_input* && __zfiles_update_files f'
	['[_ -]']='__zfiles_filter+="*[_ -]*" && __zfiles_update_files f'
	[K\|,]='__zfiles_select_scroll 1 -1'
	['J|;|\<tab\>']='__zfiles_select_scroll 1 +1'
)

alias -g ZAllFiles='$__zfiles_files'
alias -g ZFile='${__zfiles_files[(e)$__zfiles_cur]:?}'
alias -g ZFiles='${__zfiles_selection:-${__zfiles_files[(e)$__zfiles_cur]:?}}'

function __zfiles-leave() {
	zcurses end
	echoti cnorm
}

function __zfiles-enter() {
	echoti civis
	zcurses init
	zcurses clear list
	zcurses refresh list
	__zfiles_dirty_prompt=1
}

# {FILE}
function __zfiles-stat() {
	local -a stat
	if ! zstat -NA stat -F '' -- "$1" 2>/dev/null; then
		if ! zstat -LNA stat -F '' -- "$1" 2>/dev/null; then
			stat=(
				[3]='??????????'
				[4]=0
				[5]='?'
				[6]='?'
				[8]=0
			)
		elif [[ $stat[3] = l* ]]; then
			# Broken link.
			stat[3]=L${stat[3]#l}
		fi
	fi

	local buf size=$stat[8]
	if ! (( size >> 10 )); then
		# Nothing
	elif ! (( size >> 20 )); then
		size=$(( size >> 10 ))k
	elif ! (( size >> 30 )); then
		size=$(( size >> 20 ))M
	elif ! (( size >> 40 )); then
		size=$(( size >> 30 ))G
	else
		size=$(( size >> 40 ))T
	fi

	local nlink=$stat[4]
	if (( nlink < 1000 )); then
		# Nothing.
	elif (( nlink < 1000000 )); then
		nlink=$(( nlink / 1000 ))k
	else
		nlink=$(( nlink / 1000000 ))m
	fi

	# target=${stat[14]}
	printf -v buf \
		'%s %4s %s %s %5s ' \
		${stat[3]} $nlink ${(r:8:)stat[5]} ${(r:8:)stat[6]} $size
	__zfiles_stat_cache[(e)$1]=$buf
}

# {MSG}
function __zfiles_error() {
	__zfiles-leave
	printf >&2 '%s\n' ${fg_bold[red]}"$*"${reset_color}
	read -k1 '?Continue...'
	__zfiles-enter
}

function __zfiles_render() {
	if (( __zfiles_rendered_top != __zfiles_top )); then
		zcurses scroll list $(( __zfiles_top - __zfiles_rendered_top ))
		__zfiles_dirty_prompt=1
		__zfiles_rendered_top=__zfiles_top
	fi

	integer line=0 i
	local icon color stat type class
	for (( i=__zfiles_top; i <= __zfiles_bottom; ++i, ++line )) do
		local file=$__zfiles_files[(e)$i]

		zcurses move list $line 0

		if (( ${+__zfiles_selection[(re)$file]} )); then
			zcurses attr list reverse bold
			zcurses char list '*'
		else
			zcurses char list ' '
		fi
		if (( i == __zfiles_cur )); then
			zcurses attr list reverse -bold
		else
			zcurses attr list -reverse -bold
		fi

		if (( __zfiles_do_stat )) && [[ ! -v '__zfiles_stat_cache[(e)${:-$file}]' ]]; then
			__zfiles-stat "$file"
		fi

		type=fi
		icon=
		class=
		color=
		stat=$__zfiles_stat_cache[(e)$file]
		case $stat in
		-[r-][w-]x*)
			type=ex; class='*'
			;&
		-*)
			icon=$__zfiles_icon_cache[(e)$file]
			if [[ -z $icon ]]; then
				icon=${${__zfiles_icons[(k)$file]:-$__zfiles_icons[(e)$type]}:-??}
				__zfiles_icon_cache[(e)$file]=$icon
			fi

			color=$__zfiles_color_cache[(e)$file]
			if [[ -z $color ]]; then
				color=${${__zfiles_colors[(k)$file]:-$__zfiles_colors[(e)$type]}:-default/default}
				__zfiles_color_cache[(e)$file]=$color
			fi
			;;
		d*) type=di; class=/ ;;
		l*) type=ln; class=@ ;;
		c*) type=cd; class=% ;;
		b*) type=bd; class='#' ;;
		p*) type=pi; class='|' ;;
		s*) type=so; class== ;;
		L*) type=or; class=@ ;;
		esac

		[[ -z $icon ]] && icon=${__zfiles_icons[(e)$type]:-??}
		[[ -z $color ]] && color=${__zfiles_colors[(e)$type]:-default/default}

		if (( 2 <= __zfiles_do_stat )); then
			zcurses string list "$stat"
		fi
		zcurses attr list ${=color}
		zcurses string list "$icon"
		zcurses string list "$file"
		zcurses attr list -bold -underline -reverse default/default
		zcurses string list "$class"
		if (( ! ${+__zfiles_comment_cache[(e)$file]} && $+functions[zfiles_comment] )); then
			# Hint: Always return with false to use custom rendering logic. Use
			# $__zfiles_comment_cache[(e)X] where X is ., .., or
			# "/$1/{MYATTR1,MYATTR2}" (leading / is to avoid treating it as a valid
			# path) if you would like to use caching.
			if zfiles_comment "$file"; then
				__zfiles_comment_cache[(e)$file]=$REPLY
			fi
		fi
		zcurses string list "${__zfiles_comment_cache[(e)$file]}"

		zcurses clear list eol
	done

	zcurses attr list 250/default
	for (( ; line < __zfiles_lines; ++line )) do
		zcurses move list $line 0
		zcurses char list '~'
		zcurses clear list eol
	done
	zcurses attr list default/default

	if [[ -n $__zfiles_input ]]; then
		zcurses move list $(( __zfiles_lines - 1 )) $(( COLUMNS - 10 ))
		zcurses string list "$__zfiles_input"
	fi

	zcurses move list $(( __zfiles_cur - __zfiles_top )) 0
	zcurses refresh list

	if (( __zfiles_dirty_prompt )); then
		zcurses refresh prompt
		__zfiles_render_prompt
	fi
}

function __zfiles_render_prompt() {
	__zfiles_dirty_prompt=0
	echoti sc
	echoti home
	# BANANA: Not the same as `print -P` when $PS1 contains <BS><CR> (\\\n).
	print -n "${(%%)PS1}"
	echoti el
	echoti rc
}

# {RELATIVE} {LINES}
function __zfiles_select() {
	__zfiles_cur=$(( __zfiles_cur * ${1?} + ${2?} ))

	if (( __zfiles_cur < 1 )); then
		__zfiles_cur=1
	fi

	if (( $#__zfiles_files < __zfiles_cur )); then
		__zfiles_cur=$#__zfiles_files
	fi

	__zfiles_dirty_prompt=1
}

# {RELATIVE} {LINES}
function __zfiles_scroll() {
	__zfiles_top=$(( __zfiles_top * ${1?} + ${2?} ))

	if (( __zfiles_top < 1 )); then
		__zfiles_top=1
	fi

	(( __zfiles_bottom=__zfiles_top + __zfiles_lines - 1 ))
	if (( $#__zfiles_files < __zfiles_bottom )); then
		__zfiles_bottom=$#__zfiles_files
		(( __zfiles_top=__zfiles_bottom - __zfiles_lines + 1 ))
		if (( __zfiles_top < 1 )); then
			__zfiles_top=1
		fi
	fi

	__zfiles_dirty_prompt=1
}

# {HALF_PAGES}
function __zfiles_select_scroll_half() {
	__zfiles_select_scroll 1 $(( ${1?} * __zfiles_lines / 2 ))
}

# {HALF_PAGES}
function __zfiles_scroll_select_half() {
	__zfiles_scroll_select 1 $(( ${1?} * __zfiles_lines / 2 ))
}

function __zfiles_adjust_scroll() {
	if (( __zfiles_cur < __zfiles_top + __zfiles_scrolloff )); then
		__zfiles_scroll 0 $(( __zfiles_cur - __zfiles_scrolloff ))
	elif (( __zfiles_top + __zfiles_lines - __zfiles_scrolloff <= __zfiles_cur )); then
		__zfiles_scroll 0 $(( __zfiles_cur - __zfiles_lines + 1 + __zfiles_scrolloff ))
	else
		# When #__zfiles_files or __zfiles_lines changes
		# __zfiles_bottom has to be updated.
		__zfiles_scroll 1 0
	fi
}

function __zfiles_adjust_select() {
	if (( __zfiles_cur < __zfiles_top + __zfiles_scrolloff )); then
		__zfiles_select 0 $(( __zfiles_top + __zfiles_scrolloff ))
	elif (( __zfiles_top + __zfiles_lines - __zfiles_scrolloff <= __zfiles_cur )); then
		__zfiles_select 0 $(( __zfiles_top + __zfiles_lines - __zfiles_scrolloff - 1 ))
	fi
}

function __zfiles_select_scroll() {
	__zfiles_select "$@"
	__zfiles_adjust_scroll
}

function __zfiles_scroll_select() {
	__zfiles_scroll "$@"
	__zfiles_adjust_select
}

function __zfiles_tag() {
}

function __zfiles_update_files() {
	__zfiles_dir_selection[$__zfiles_PWD]=$__zfiles_files[(e)$__zfiles_cur]

	if [[ ${1?} == *g* ]]; then
		__zfiles_PWD=$PWD
		if (( __zfiles_glob_dots )); then
			setopt glob_dots
		else
			setopt noglob_dots
		fi
		__zfiles_globfiles=( ${~${=__zfiles_glob}} )
	fi

	if [[ $1 == *g* || $1 == *f* ]]; then
		__zfiles_files=(
			${(M)__zfiles_globfiles:#(#i).#$~__zfiles_filter*}
			${(M)__zfiles_globfiles:#(#i)*$~__zfiles_filter*}
		)
		__zfiles_files=( ${(u)__zfiles_files} )
	fi

	integer index=${__zfiles_files[(rie)${__zfiles_dir_selection[$__zfiles_PWD]}]}
	__zfiles_select_scroll 0 $(( index <= $#__zfiles_files ? index : 1 ))
}

function __zfiles_chpwd() {
	__zfiles_filter=
	__zfiles_update_files g
	__zfiles_prompt=
	__zfiles_selection=()
	__zfiles_drop_caches
}

function __zfiles_resize() {
	zcurses resize $LINES $COLUMNS endwin
}

bindkey -N zfiles+viins viins
function __zfiles-insert-zfiles-and-accept() {
	LBUFFER+=' -- ZFiles '
	zle .accept-line
}
zle -N {,__zfiles-}insert-zfiles-and-accept
bindkey -M zfiles+viins '^[^M' insert-zfiles-and-accept

function __zfiles_shellout() {
	{
		__zfiles-leave
		"$@"
	} always {
		__zfiles-enter
	}
}

function __zfiles_vared() {
	{
		__zfiles_active=2
		echoti home
		vared -M zfiles+viins -p "$PS1" "$@"
	} always {
		__zfiles_prompt=
		__zfiles_active=1
	}
}

function __zfiles_cmd() {
	local cmd=$*
	{
		__zfiles-leave
		alias -g \$='ZFiles'
		if __zfiles_vared -e cmd; then
			REPLY=$cmd
			eval $cmd || {
				printf >&2 'zsh: exit %d' $?
				read -k1
				echo
			}
		fi
	} always {
		unalias \$
		__zfiles-enter
	}
}

# {FORWARD}
function __zfiles_bracket() {
	integer i search_d=-1
	for (( i=$__zfiles_cur; 1 <= i && i <= $#__zfiles_files; i+=$1 ? 1 : -1 )) do
		local file=$__zfiles_files[(e)$i]
		local stat=$__zfiles_stat_cache[(e)$file]
		if (( search_d < 0 )); then
			! [[ $stat =~ '^d' ]]
			search_d=$?
		else
			[[ $stat =~ '^d' ]]
			(( search_d == $? )) && break
		fi
	done
	__zfiles_select_scroll 0 $i
}

# {SAVE} {FORWARD} {LETTER}
function __zfiles_f() {
	if (( $1 )); then
		__zfiles_last_f_forward=$2
		__zfiles_last_f=$3
	fi

	local patterns=('' '.') flags=
	[[ $3 =~ '[[:lower:]]' ]] && flags='#i'

	integer closest_index
	if (( $2 )); then
		closest_index=$#__zfiles_files
	else
		closest_index=0
	fi
	integer do_scroll=0
	local prefix index
	for prefix in "${patterns[@]}"; do
		if (( $2 )); then
			index=${${__zfiles_files:$__zfiles_cur}[(i)($flags)$prefix$3*]}
			(( index+=__zfiles_cur ))
		else
			index=${${__zfiles_files:0:$((__zfiles_cur - 1))}[(I)($flags)$prefix$3*]}
		fi
		if (( $2 )); then
			(( index < closest_index ))
		else
			(( closest_index < index ))
		fi && {
			do_scroll=1
			closest_index=$index
		}
	done
	(( do_scroll )) && __zfiles_select_scroll 0 $closest_index
}

function __zfiles_toggle() {
	if (( ${+__zfiles_selection[(re)$1]} )); then
		__zfiles_selection[(e)${__zfiles_selection[(rie)$1]}]=()
	else
		__zfiles_selection+=( $1 )
	fi
	__zfiles_dirty_prompt=1
	__zfiles_select_scroll 1 +1
}

function __zfiles_set_glob() {
	if __zfiles_shellout __zfiles_vared -p "${bold_color}glob${reset_color}=" -eca __zfiles_glob; then
		__zfiles_update_files g
	fi
}
alias __zfiles_set_glob='noglob __zfiles_set_glob'

function __zfiles_set_mode() {
	__zfiles_mode=$1
	__zfiles_dirty_prompt=1
}

function __zfiles_open() {
	if test -d $1; then
		cd $1
	else
		__zfiles-leave
		if (( $+functions[open] )); then
			open $1
		else
			$EDITOR -- $1
		fi
		__zfiles-enter
	fi
}

function __zfiles_drop_caches() {
	__zfiles_stat_cache=()
	__zfiles_color_cache=()
	__zfiles_icon_cache=()
	__zfiles_comment_cache=()
}

function __zfiles_sgr2curses() {
	REPLY=
	if [[ -z $1 ]]; then
		return
	fi

	local attrs fg bg

	integer i
	local params=( 0 ${(s.;.)1} )
	for (( i=1; i <= $#params; ++i )); do
		local n=${params[i]}
		case $n in
		0) attrs=; fg=; bg= ;;
		1) attrs+='bold ' ;;
		3)
			# Ignore reverse video.
			;;
		4) attrs+='underline ' ;;
		3[0-7]) fg=$(( n - 30 )) ;;
		38)
			if (( $params[++i] == 5 )); then
				fg=$(( $params[++i] ))
			fi
			;;
		4[0-7]) fg=$(( n - 30 )) ;;
		48)
			if (( $params[++i] == 5 )); then
				bg=$(( $params[++i] ))
			fi
			;;
		9[0-7]) fg=$(( n + 8 )) ;;
		10[0-7]) bg=$(( n + 8 )) ;;
		*) printf >&2 'unknown attribute (%d) in LS_COLOR: %s\n' "$n" "$params" ;;
		esac
	done

	if [[ -z $attrs$fg$bg ]]; then
		REPLY=
	else
		REPLY=$attrs${fg:-default}/${bg:-default}
	fi
}

function __zfiles_update_ls_colors() {
	__zfiles_icons=( ${=${${(s.:.)LS_ICONS}//=/ }} )
	__zfiles_colors=()
	typeset pat color
	for pat color in ${(kv)${=${${(s.:.)LS_COLORS}//=/ }}}; do
		local sgr=${color%%m*}
		if [[ $sgr != $color ]]; then
			__zfiles_sgr2curses $sgr
			if [[ -n $REPLY ]]; then
				__zfiles_colors[(e)$pat]=$REPLY
			fi
		fi
	done
}

function zfiles-show() {
	{
		setopt local_options local_traps
		setopt glob glob_star_short extended_glob null_glob

		__zfiles_active=1

		echoti civis

		# zformat -a to format tables
		add-zsh-hook chpwd __zfiles_chpwd

		trap return INT
		trap __zfiles_resize WINCH

		zcurses init
		for win in $zcurses_windows; do
			[[ stdscr = $win ]] || zcurses delwin $win
		done

		__zfiles_lines=$(( LINES - 1 ))

		zcurses addwin list $__zfiles_lines $COLUMNS 1 0
		zcurses scroll list off
		zcurses clear list
		zcurses timeout list 5000

		zcurses addwin prompt 1 $COLUMNS 0 0
		# ncurses expects prompt window to be clear but we render into it
		# externally. It causes issues when ncurses wants to scroll the screen
		# downwards because this fake blank line will end up in the middle of the
		# screen causing garbage to show up.
		#
		# This code is mostly the result of trial and error: no glitches and no
		# flickering. If any occurs, try longer string or increment the position. I
		# can only guess why it works.
		zcurses move prompt 0 4
		zcurses string prompt '____'

		[[ -n $1 && $1 != $PWD ]] && cd -- "$1"

		# Otherwise retain old file list.
		if [[ $PWD != $__zfiles_PWD ]]; then
			__zfiles_chpwd
		else
			__zfiles_dirty_prompt=1
		fi

		__zfiles_input=
		while :; do
			__zfiles_render

			if ! zcurses input list; then
				if (( __zfiles_do_stat && 0 < $#__zfiles_files )); then
					__zfiles-stat $__zfiles_files[(e)$__zfiles_cur]
				fi
				continue
			fi

			if [[ ${(q+)REPLY} =~ "^\\$'\\\(.*)'$|^(<)$" ]]; then
				REPLY="<${__ZFILES_CONTROL_KEYMAP[(k)${match[1]}]:-${match[1]}}>"
			fi
			__zfiles_input=$__zfiles_input$REPLY

			local bindings="__zfiles_bindings_$__zfiles_mode"
			local binding=${(v)${(P)bindings}[(k)$__zfiles_input]}
			if [[ -n $binding ]]; then
				eval $binding ||:
				__zfiles_input=
			elif [[ -n $__zfiles_input ]] && [[ -z "${${(P)bindings}[(i)${(b)${(b)__zfiles_input}}*]}" ]]; then
				__zfiles_error "no binding for ${(qq)__zfiles_input}"
				__zfiles_input=
			fi
		done
	} always {
		add-zsh-hook -D chpwd __zfiles_chpwd

		zcurses delwin list
		__zfiles-leave

		__zfiles_active=0
	}
}

zle -N zfiles-show

__zfiles_update_ls_colors

function zfiles() {
	zfiles-show "$@"
	if (( $#__zfiles_selection )); then
		print -c $__zfiles_selection
	fi
}

[[ -o ksh_autoload ]] || zfiles "$@"
