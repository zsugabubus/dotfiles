#autoload

POWERLINE_DIR_FG=254 # 111
POWERLINE_VCS_FG=113 # 113

local function prompt_powerline_setup() {
	ZLE_PROMPT_INDENT=0

	autoload -Uz colors &&
	colors

	_POWERLINE_DEFAULT_USER=${1:-}
	_POWERLINE_DEFAULT_HOST=${2:-}

	case $TERM in
	linux)
		ZLE_RPROMPT_INDENT=1
		PS1='[%n@%M $vcs_info_msg_0_]%(!,#,$) '
		PS2='%_> '
		RPS1='%(1j. %F{yellow}%B&%j%b%f.)%(0?.. %F{red}%B[$ZSH_POWERLINE_STATUS%{]%}%b)%f'
		;;
	*)
		# It just works.
		ZLE_RPROMPT_INDENT=$((1 - $+TMUX))
		PS1='$_powerline_where%K{$POWERLINE_DIR_FG}%F{236} ${${vcs_info_msg_0_:-"$_powerline_path%F{$POWERLINE_DIR_FG}$_powerline_writeable"}//\$_powerline_writeable/$_powerline_writeable} %k%{%G%}%f '
		# PS1='$_powerline_where%K{$POWERLINE_DIR_FG}%F{236} ${${$(__git_ps1 "%%{%%G%%} %%{%%G%%} %%{%%G%%} %s%%F{$POWERLINE_VCS_FG}"):-"$_powerline_path%F{$POWERLINE_DIR_FG}$_powerline_writeable"}//\$_powerline_writeable/$_powerline_writeable} %k%{%G%}%f '
		RPS1='%F{250}%(1j. %%%j.)$_powerline_keymap%b%(?.. %F{197}%{%G%}%K{197}%F{227} %B$ZSH_POWERLINE_STATUS%b)%(2L. %F{254}%{%G%}%K{254}%F{244} %L.)'"$([[ -n $TMUX ]] && print -n " " || print -n "%{ %}")"
		PS2='%K{254}%F{247} %_ %k%F{254}%f '
		;;
	esac

	prompt_opts=(cr percent sp subst)

	function zle-line-init zle-keymap-select() {
		case $KEYMAP in
		# For Rxvt.
		viins|main) printf '\e[6 q\r' ;; # Non-blinking I-beam cursor.
		*)          printf '\e[2 q\r' ;; # Non-blinking block cursor.
		esac
		case $KEYMAP in
		vicmd)      _powerline_keymap=' %B%F{148}%{%G%}%F{22}%K{148} N' ;;
		main|viins) _powerline_keymap=' %B%F{33}%{%G%}%F{255}%K{33} I' ;;
		*)          _powerline_keymap='' ;;
		esac
		zle .reset-prompt
		zle -R
	}
	zle -N zle-line-init
	zle -N zle-keymap-select

	function zle-line-finish() {
		printf '\033[2 q\r' # Non-blinking block cursor.
		_powerline_keymap=
		zle .reset-prompt
		zle -R
	}
	zle -N zle-line-finish

	function _powerline_where_info() {
		local useratdomain
		print -Pnv useratdomain -f '%s' ':%n@%m:'
		useratdomain=${${${useratdomain/:$_POWERLINE_DEFAULT_USER@/@}/@$_POWERLINE_DEFAULT_HOST:/@}:gs/:/}

		if [[ $useratdomain != "@" ]]; then
			_powerline_where='%K{234}%F{214}%B '$useratdomain' %b%K{$POWERLINE_DIR_FG}%F{234}%{%G%}'
		else
			_powerline_where=
		fi
	}

	function _powerline_writeable_info() {
		if [[ ! -w . ]]; then
			_powerline_writeable=' %F{249}%{%G%}%F{$POWERLINE_DIR_FG}'
		else
			_powerline_writeable=
		fi
	}

	function _powerline_precmd() {
		ZSH_POWERLINE_STATUS=${${:-$signals[$(($? - 127))]}:-$?}
		if (( $#pipestatus > 1 )); then
			ZSH_POWERLINE_STATUS= # ${(j.|.)pipestatus}
			for code in $pipestatus; do
				ZSH_POWERLINE_STATUS=$ZSH_POWERLINE_STATUS\|${${:-$signals[$(($code - 127))]}:-$code}
			done
			ZSH_POWERLINE_STATUS=${ZSH_POWERLINE_STATUS:1}
		fi
		_powerline_where_info
		_powerline_writeable_info

		vcs_info 2>&-
	}

	function _powerline_reset_cursor() {
		printf '\e[2 q\r'
	}

	function _powerline_path_info() {
		# Directory changed while zle widget was active.
		zle && zle .reset-prompt

		local pathdev=$(findmnt --real -fnrM . -o SOURCE)
		# nvcsformat
		print -Pnv _powerline_path -f '%s' '%~'
		if ((#_powerline_path > COLUMNS * 10 / 24)); then
			print -Pnv _powerline_path -f '%s' '%'$((COLUMNS * 10 / 24))'<%{%G…%}<%(5~|%-1~/%{%G…%}/%3~|%4~)'
		fi

		if [[ -n $pathdev ]]; then
			_powerline_path="${${pathdev#/dev/}%:*} %{%G%} $_powerline_path"
		else
			_powerline_path="%{%G%} $_powerline_path"
		fi
	}

	case "$TERM" in
	linux)
		zstyle ':completion:*:warnings'  format '%F{red}%BNo matches for: %d%b%f'
		zstyle ':completion:*'           format '%B------- %d -------%b'
		;;
	*)
		zstyle ':completion::*:warnings' format '%K{197}%F{227}%B No matches %k%F{197}%b%f %d%b%k%f'
		zstyle ':completion::*'          format '%K{238}%F{254} %d %k%F{238}%f'
		;;
	esac

	setopt prompt_subst
	# zmodload zsh/datetime &&
	autoload -Uz vcs_info &&
	zstyle ':vcs_info:*' enable git
	zstyle ':vcs_info:*' use-prompt-escapes true
	zstyle ':vcs_info:*' check-for-changes false
	zstyle ':vcs_info:*' check-for-staged-changes false
	zstyle ':vcs_info:*' use-simple true
	zstyle ':vcs_info:*' disable-patterns "${(b)HOME}" ~m
	zstyle ':vcs_info:git*+set-message:*' hooks git-st
	case $TERM in
	('linux')
		zstyle ':vcs_info:git*' formats '%r/%S %s:(%b%m%u%c)' &&
		# zstyle ':vcs_info:git*' actionformats "%r/%S [ %b|%a]%m%u%c   " &&
		zstyle ':vcs_info:*' nvcsformats '%(5~|%-1~/.../%3~|%4~)'
		;;
	(*)
		zstyle ':vcs_info:git*' formats '%{%G%} %r/%S$_powerline_writeable %K{$POWERLINE_VCS_FG}%F{$POWERLINE_DIR_FG}%{%G%}%K{$POWERLINE_VCS_FG}%F{239} %{%G%} %b%m%u%c%F{$POWERLINE_VCS_FG}' &&
		zstyle ':vcs_info:git*' actionformats "%{%G%} %r/%S %K{$POWERLINE_VCS_FG}%F{$POWERLINE_DIR_FG}%{%G%}%K{$POWERLINE_VCS_FG}%F{239} %{%G%} %b [%a%u]%F{$POWERLINE_VCS_FG}" &&
		zstyle ':vcs_info:*' branchformat "%{%G%} %b:%r" &&
		zstyle ':vcs_info:*' nvcsformats '' # Will be replaced at the prompt. Needed because there is no expansion here.
		;;
	esac

	autoload -Uz add-zsh-hook
	add-zsh-hook precmd _powerline_precmd
	add-zsh-hook chpwd _powerline_path_info
	add-zsh-hook zshexit _powerline_reset_cursor
	_powerline_path_info
}

function _prompt_powerline_teardown() {
	_powerline_reset_cursor
	add-zsh-hook -D precmd _powerline_precmd
	add-zsh-hook -D chpwd _powerline_path_info
	add-zsh-hook -D zshexit _powerline_reset_cursor
	unfunction vcs_changes
	unfunction _powerline_where_info
	unfunction _powerline_writeable_info
	unfunction _powerline_precmd
	unfunction _powerline_path_info
	unfunction _powerline_reset_cursor
	zstyle -d ':vcs_info:*'
}

function prompt_powerline_preview() {
	prompt_preview_theme powerline
	prompt_preview_theme powerline $USER $HOST
}

[[ -o ksh_autoload ]] || prompt_powerline_setup "$@"
