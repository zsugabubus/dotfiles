local vim = create_vim({ isolate = false })

describe('normal mode', function()
	before_each(function()
		vim:set_lines({ 'X-X-O-X-X' })
		vim:feed('4l')
	end)

	it('f', function()
		vim:feed('fXrf')
		vim:assert_lines({ 'X-X-O-f-X' })
		vim:feed(';r;')
		vim:assert_lines({ 'X-X-O-f-;' })
		vim:feed(',r,')
		vim:assert_lines({ 'X-,-O-f-;' })
	end)

	it('F', function()
		vim:feed('FXrF')
		vim:assert_lines({ 'X-F-O-X-X' })
		vim:feed(';r;')
		vim:assert_lines({ ';-F-O-X-X' })
		vim:feed(',r,')
		vim:assert_lines({ ';-F-O-,-X' })
	end)

	it('t', function()
		vim:feed('tXrt')
		vim:assert_lines({ 'X-X-OtX-X' })
		vim:feed(';r;')
		vim:assert_lines({ 'X-X-OtX;X' })
		vim:feed(',r,')
		vim:assert_lines({ 'X-X,OtX;X' })
	end)

	it('T', function()
		vim:feed('TXrT')
		vim:assert_lines({ 'X-XTO-X-X' })
		vim:feed(';r;')
		vim:assert_lines({ 'X;XTO-X-X' })
		vim:feed(',r,')
		vim:assert_lines({ 'X;XTO,X-X' })
	end)
end)

describe('normal mode with count', function()
	before_each(function()
		vim:set_lines({ 'X-X-X-X-X-X-X-X' })
	end)

	it('f', function()
		vim:feed('2fXrf')
		vim:assert_lines({ 'X-X-f-X-X-X-X-X' })
		vim:feed('3;r;')
		vim:assert_lines({ 'X-X-f-X-X-;-X-X' })
		vim:feed('9;r;')
		vim:assert_lines({ 'X-X-f-X-X-;-X-;' })
	end)

	it('F', function()
		vim:feed('$')
		vim:feed('2FXrF')
		vim:assert_lines({ 'X-X-X-X-X-F-X-X' })
		vim:feed('3;r;')
		vim:assert_lines({ 'X-X-;-X-X-F-X-X' })
		vim:feed('9;r;')
		vim:assert_lines({ ';-X-;-X-X-F-X-X' })
	end)
end)

describe('normal mode linewise', function()
	before_each(function()
		vim:set_lines({ 'X', '-O-', 'X' })
		vim:feed('jl')
		vim.o.virtualedit = 'all'
	end)

	it('f', function()
		vim:feed('fXrf')
		vim:assert_lines({ 'X', '-O-', 'f' })
	end)

	it('F', function()
		vim:feed('FXrF')
		vim:assert_lines({ 'F', '-O-', 'X' })
	end)

	it('t', function()
		vim:feed('tXrt')
		vim:assert_lines({ 'X', '-O-t', 'X' })
	end)

	it('T', function()
		vim:feed('TXrT')
		vim:assert_lines({ 'XT', '-O-', 'X' })
	end)
end)

it('normal mode with pattern not found', function()
	vim:set_lines({ 'X-X-X' })
	vim:feed('farf')
	vim:assert_lines({ 'f-X-X' })
end)

describe('visual mode', function()
	before_each(function()
		vim:set_lines({ '|X<--O-->X|' })
		vim:feed('5l')
	end)

	it('f', function()
		vim:feed('vfXd')
		vim:assert_lines({ '|X<--|' })
	end)

	it('F', function()
		vim:feed('vFXd')
		vim:assert_lines({ '|-->X|' })
	end)

	it('t', function()
		vim:feed('vtXd')
		vim:assert_lines({ '|X<--X|' })
	end)

	it('T', function()
		vim:feed('vTXd')
		vim:assert_lines({ '|X-->X|' })
	end)
end)

describe('operator-pending mode', function()
	before_each(function()
		vim:set_lines({ 'X', 'X<--O-->X', 'X' })
		vim:feed('j4l')
	end)

	it('f', function()
		vim:feed('dfX')
		vim:assert_lines({ 'X', 'X<--', 'X' })
		vim:feed('.')
		vim:assert_lines({ 'X', 'X<-' })
	end)

	it('F', function()
		vim:feed('dFX')
		vim:assert_lines({ 'X', 'O-->X', 'X' })
		vim:feed('.')
		vim:assert_lines({ 'O-->X', 'X' })
	end)

	it('t', function()
		vim.o.virtualedit = 'all'
		vim:feed('dtX')
		vim:assert_lines({ 'X', 'X<--X', 'X' })
		vim:feed('.')
		pending('Likely unfixable')
		vim:assert_lines({ 'X', 'X<--X' })
	end)

	it('T', function()
		vim:feed('dTX')
		vim:assert_lines({ 'X', 'XO-->X', 'X' })
		vim:feed('.')
		pending('Likely unfixable')
		vim:assert_lines({ 'XO-->X', 'X' })
	end)
end)

it('f with non-lower-case character stops anywhere', function()
	local function test_case(c)
		vim:set_lines({ 'xxx' .. c .. 'x' })
		vim:feed('0f' .. c .. 'rf')
		vim:assert_lines({ 'xxxfx' })

		vim:set_lines({ 'xx1' .. c .. 'x' })
		vim:feed('0f' .. c .. 'rf')
		vim:assert_lines({ 'xx1fx' })

		vim:set_lines({ c .. c .. c })
		vim:feed('0f' .. c .. 'rf')
		vim:assert_lines({ c .. 'f' .. c })
	end

	test_case("'")
	test_case(' ')
	test_case('"')
	test_case('$')
	test_case('(')
	test_case(')')
	test_case('*')
	test_case('+')
	test_case('-')
	test_case('.')
	test_case('0')
	test_case('3')
	test_case('6')
	test_case('9')
	test_case('>')
	test_case('?')
	test_case('A')
	test_case('J')
	test_case('R')
	test_case('Z')
	test_case('[')
	test_case('\\')
	test_case(']')
	test_case('^')
	test_case('{')
	test_case('}')
end)

describe('f with lower-case character', function()
	local function helper(c, input, expected)
		local function sub(s)
			local C = string.upper(c)
			return (s:gsub('a', c):gsub('A', C))
		end

		vim:set_lines({ sub(input) })
		vim:feed('0f' .. c .. 'r|')
		vim:assert_lines({ sub(expected) })
	end

	local function case(name, input, expected)
		it(name, function()
			helper('a', input, expected)
			helper('j', input, expected)
			helper('r', input, expected)
			helper('z', input, expected)
		end)
	end

	case('stops inside snake_case word', 'xaaa_aaaa', 'xaaa_|aaa')
	case('stops inside kebab-case word', 'xaaa-aaaa', 'xaaa-|aaa')
	case('stops inside SCREAMING_SNAKE_CASE word', 'XXX_AAA', 'XXX_|AA')
	case('stops inside CamelCase word', 'XaaaAaaa', 'Xaaa|aaa')
	case('stops inside UPPERCASE word', 'XXXAAA', 'XXX|AA')
	case('stops after digit 0', 'x0ax', 'x0|x')
	case('stops after digit 3', 'x3ax', 'x3|x')
	case('stops after digit 6', 'x6ax', 'x6|x')
	case('stops after digit 9', 'x9ax', 'x9|x')
end)
