local function assert_lines(expected)
	local got = vim.api.nvim_buf_get_lines(0, 0, -1, false)
	assert.are.same(expected, got)
end

local function feedkeys(keys)
	return vim.api.nvim_feedkeys(keys, 'xtim', true)
end

local function set_lines(lines)
	return vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)
end

describe('normal mode', function()
	before_each(function()
		set_lines({ 'X-X-O-X-X' })
		feedkeys('4l')
	end)

	test('f', function()
		feedkeys('fXrf')
		assert_lines({ 'X-X-O-f-X' })
		feedkeys(';r;')
		assert_lines({ 'X-X-O-f-;' })
		feedkeys(',r,')
		assert_lines({ 'X-,-O-f-;' })
	end)

	test('F', function()
		feedkeys('FXrF')
		assert_lines({ 'X-F-O-X-X' })
		feedkeys(';r;')
		assert_lines({ ';-F-O-X-X' })
		feedkeys(',r,')
		assert_lines({ ';-F-O-,-X' })
	end)

	test('t', function()
		feedkeys('tXrt')
		assert_lines({ 'X-X-OtX-X' })
		feedkeys(';r;')
		assert_lines({ 'X-X-OtX;X' })
		feedkeys(',r,')
		assert_lines({ 'X-X,OtX;X' })
	end)

	test('T', function()
		feedkeys('TXrT')
		assert_lines({ 'X-XTO-X-X' })
		feedkeys(';r;')
		assert_lines({ 'X;XTO-X-X' })
		feedkeys(',r,')
		assert_lines({ 'X;XTO,X-X' })
	end)
end)

describe('normal mode with count', function()
	before_each(function()
		set_lines({ 'X-X-X-X-X-X-X-X' })
	end)

	test('f', function()
		feedkeys('2fXrf')
		assert_lines({ 'X-X-f-X-X-X-X-X' })
		feedkeys('3;r;')
		assert_lines({ 'X-X-f-X-X-;-X-X' })
		feedkeys('9;r;')
		assert_lines({ 'X-X-f-X-X-;-X-;' })
	end)

	test('F', function()
		feedkeys('$')
		feedkeys('2FXrF')
		assert_lines({ 'X-X-X-X-X-F-X-X' })
		feedkeys('3;r;')
		assert_lines({ 'X-X-;-X-X-F-X-X' })
		feedkeys('9;r;')
		assert_lines({ ';-X-;-X-X-F-X-X' })
	end)
end)

describe('normal mode linewise', function()
	before_each(function()
		set_lines({ 'X', '-O-', 'X' })
		feedkeys('jl')
		vim.o.virtualedit = 'all'
	end)

	test('f', function()
		feedkeys('fXrf')
		assert_lines({ 'X', '-O-', 'f' })
	end)

	test('F', function()
		feedkeys('FXrF')
		assert_lines({ 'F', '-O-', 'X' })
	end)

	test('t', function()
		feedkeys('tXrt')
		assert_lines({ 'X', '-O-t', 'X' })
	end)

	test('T', function()
		feedkeys('TXrT')
		assert_lines({ 'XT', '-O-', 'X' })
	end)
end)

test('normal mode with pattern not found', function()
	set_lines({ 'X-X-X' })
	feedkeys('farO')
	assert_lines({ 'O-X-X' })
end)

describe('visual mode', function()
	before_each(function()
		set_lines({ '|X<--O-->X|' })
		feedkeys('5l')
	end)

	test('f', function()
		feedkeys('vfXd')
		assert_lines({ '|X<--|' })
	end)

	test('F', function()
		feedkeys('vFXd')
		assert_lines({ '|-->X|' })
	end)

	test('t', function()
		feedkeys('vtXd')
		assert_lines({ '|X<--X|' })
	end)

	test('T', function()
		feedkeys('vTXd')
		assert_lines({ '|X-->X|' })
	end)
end)

describe('operator-pending mode', function()
	before_each(function()
		set_lines({ 'X', 'X<--O-->X', 'X' })
		feedkeys('j4l')
	end)

	test('f', function()
		feedkeys('dfX')
		assert_lines({ 'X', 'X<--', 'X' })
		feedkeys('.')
		assert_lines({ 'X', 'X<-' })
	end)

	test('F', function()
		feedkeys('dFX')
		assert_lines({ 'X', 'O-->X', 'X' })
		feedkeys('.')
		assert_lines({ 'O-->X', 'X' })
	end)

	test('t', function()
		vim.o.virtualedit = 'all'
		feedkeys('dtX')
		assert_lines({ 'X', 'X<--X', 'X' })
		feedkeys('.')
		pending('Likely unfixable')
		assert_lines({ 'X', 'X<--X' })
	end)

	test('T', function()
		feedkeys('dTX')
		assert_lines({ 'X', 'XO-->X', 'X' })
		feedkeys('.')
		pending('Likely unfixable')
		assert_lines({ 'XO-->X', 'X' })
	end)
end)

describe('f with character', function()
	local function case(c)
		describe(c, function()
			test('stops anywhere', function()
				set_lines({ 'xxx' .. c .. 'xxx' })
				feedkeys('f' .. c .. 'rO')
				assert_lines({ 'xxxOxxx' })
			end)
		end)
	end

	case("'")
	case(' ')
	case('"')
	case('$')
	case('(')
	case(')')
	case('*')
	case('+')
	case('-')
	case('.')
	case('0')
	case('3')
	case('6')
	case('9')
	case('>')
	case('?')
	case('A')
	case('J')
	case('R')
	case('Z')
	case('[')
	case('\\')
	case(']')
	case('^')
	case('{')
	case('}')
end)

describe('f with lower-case character', function()
	local function case_helper(c, name, input, expected)
		local function sub(s)
			return (s:gsub('[a]', c):gsub('A', string.upper(c)))
		end

		test(string.format('%s stops %s', c, name), function()
			set_lines({ sub(input) })
			feedkeys('f' .. c .. 'rO')
			assert_lines({ sub(expected) })
		end)
	end

	local function case(...)
		case_helper('a', ...)
		case_helper('j', ...)
		case_helper('r', ...)
		case_helper('z', ...)
	end

	case('inside snake_case word', 'xaaa_aaaa', 'xaaa_Oaaa')
	case('inside kebab-case word', 'xaaa-aaaa', 'xaaa-Oaaa')
	case('inside SCREAMING_SNAKE_CASE word', 'XXX_AAA', 'XXX_OAA')
	case('inside CamelCase word', 'XaaaAaaa', 'XaaaOaaa')
	case('inside UPPERCASE word', 'XXXAAA', 'XXXOAA')
	case('after digit 0', 'x0ax', 'x0Ox')
	case('after digit 3', 'x3ax', 'x3Ox')
	case('after digit 6', 'x6ax', 'x6Ox')
	case('after digit 9', 'x9ax', 'x9Ox')
end)
