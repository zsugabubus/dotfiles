local function assert_lines(expected)
	local got = vim.api.nvim_buf_get_lines(0, 0, -1, false)
	assert.are.same(expected, got)
end

local function feed(keys)
	vim.api.nvim_feedkeys(keys, 'xtim', true)
end

local function set_lines(lines)
	vim.api.nvim_buf_set_lines(0, 0, -1, false, lines)
end

describe('normal mode', function()
	before_each(function()
		set_lines({ 'X-X-O-X-X' })
		feed('4l')
	end)

	test('f', function()
		feed('fXrf')
		assert_lines({ 'X-X-O-f-X' })
		feed(';r;')
		assert_lines({ 'X-X-O-f-;' })
		feed(',r,')
		assert_lines({ 'X-,-O-f-;' })
	end)

	test('F', function()
		feed('FXrF')
		assert_lines({ 'X-F-O-X-X' })
		feed(';r;')
		assert_lines({ ';-F-O-X-X' })
		feed(',r,')
		assert_lines({ ';-F-O-,-X' })
	end)

	test('t', function()
		feed('tXrt')
		assert_lines({ 'X-X-OtX-X' })
		feed(';r;')
		assert_lines({ 'X-X-OtX;X' })
		feed(',r,')
		assert_lines({ 'X-X,OtX;X' })
	end)

	test('T', function()
		feed('TXrT')
		assert_lines({ 'X-XTO-X-X' })
		feed(';r;')
		assert_lines({ 'X;XTO-X-X' })
		feed(',r,')
		assert_lines({ 'X;XTO,X-X' })
	end)
end)

describe('normal mode with count', function()
	before_each(function()
		set_lines({ 'X-X-X-X-X-X-X-X' })
	end)

	test('f', function()
		feed('2fXrf')
		assert_lines({ 'X-X-f-X-X-X-X-X' })
		feed('3;r;')
		assert_lines({ 'X-X-f-X-X-;-X-X' })
		feed('9;r;')
		assert_lines({ 'X-X-f-X-X-;-X-;' })
	end)

	test('F', function()
		feed('$')
		feed('2FXrF')
		assert_lines({ 'X-X-X-X-X-F-X-X' })
		feed('3;r;')
		assert_lines({ 'X-X-;-X-X-F-X-X' })
		feed('9;r;')
		assert_lines({ ';-X-;-X-X-F-X-X' })
	end)
end)

describe('normal mode linewise', function()
	before_each(function()
		set_lines({ 'X', '-O-', 'X' })
		feed('jl')
		vim.o.virtualedit = 'all'
	end)

	test('f', function()
		feed('fXrf')
		assert_lines({ 'X', '-O-', 'f' })
	end)

	test('F', function()
		feed('FXrF')
		assert_lines({ 'F', '-O-', 'X' })
	end)

	test('t', function()
		feed('tXrt')
		assert_lines({ 'X', '-O-t', 'X' })
	end)

	test('T', function()
		feed('TXrT')
		assert_lines({ 'XT', '-O-', 'X' })
	end)
end)

test('normal mode with pattern not found', function()
	set_lines({ 'X-X-X' })
	feed('farf')
	assert_lines({ 'f-X-X' })
end)

describe('visual mode', function()
	before_each(function()
		set_lines({ '|X<--O-->X|' })
		feed('5l')
	end)

	test('f', function()
		feed('vfXd')
		assert_lines({ '|X<--|' })
	end)

	test('F', function()
		feed('vFXd')
		assert_lines({ '|-->X|' })
	end)

	test('t', function()
		feed('vtXd')
		assert_lines({ '|X<--X|' })
	end)

	test('T', function()
		feed('vTXd')
		assert_lines({ '|X-->X|' })
	end)
end)

describe('operator-pending mode', function()
	before_each(function()
		set_lines({ 'X', 'X<--O-->X', 'X' })
		feed('j4l')
	end)

	test('f', function()
		feed('dfX')
		assert_lines({ 'X', 'X<--', 'X' })
		feed('.')
		assert_lines({ 'X', 'X<-' })
	end)

	test('F', function()
		feed('dFX')
		assert_lines({ 'X', 'O-->X', 'X' })
		feed('.')
		assert_lines({ 'O-->X', 'X' })
	end)

	test('t', function()
		vim.o.virtualedit = 'all'
		feed('dtX')
		assert_lines({ 'X', 'X<--X', 'X' })
		feed('.')
		pending('Likely unfixable')
		assert_lines({ 'X', 'X<--X' })
	end)

	test('T', function()
		feed('dTX')
		assert_lines({ 'X', 'XO-->X', 'X' })
		feed('.')
		pending('Likely unfixable')
		assert_lines({ 'XO-->X', 'X' })
	end)
end)

describe('f with character', function()
	local function case(c)
		describe(c, function()
			test('stops anywhere', function()
				set_lines({ 'xxx' .. c .. 'xxx' })
				feed('f' .. c .. 'rf')
				assert_lines({ 'xxxfxxx' })
			end)
		end)
	end

	case("'")
	case(' ')
	case('"')
	case('$')
	case('(')
	case(')')
	case('*')
	case('+')
	case('-')
	case('.')
	case('0')
	case('3')
	case('6')
	case('9')
	case('>')
	case('?')
	case('A')
	case('J')
	case('R')
	case('Z')
	case('[')
	case('\\')
	case(']')
	case('^')
	case('{')
	case('}')
end)

describe('f with lower-case character', function()
	local function case_helper(c, name, input, expected)
		local function sub(s)
			return (s:gsub('[a]', c):gsub('A', string.upper(c)))
		end

		test(string.format('%s stops %s', c, name), function()
			set_lines({ sub(input) })
			feed('f' .. c .. 'r|')
			assert_lines({ sub(expected) })
		end)
	end

	local function case(...)
		case_helper('a', ...)
		case_helper('j', ...)
		case_helper('r', ...)
		case_helper('z', ...)
	end

	case('inside snake_case word', 'xaaa_aaaa', 'xaaa_|aaa')
	case('inside kebab-case word', 'xaaa-aaaa', 'xaaa-|aaa')
	case('inside SCREAMING_SNAKE_CASE word', 'XXX_AAA', 'XXX_|AA')
	case('inside CamelCase word', 'XaaaAaaa', 'Xaaa|aaa')
	case('inside UPPERCASE word', 'XXXAAA', 'XXX|AA')
	case('after digit 0', 'x0ax', 'x0|x')
	case('after digit 3', 'x3ax', 'x3|x')
	case('after digit 6', 'x6ax', 'x6|x')
	case('after digit 9', 'x9ax', 'x9|x')
end)
