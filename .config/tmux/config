set -gF @nested "#{||:#{==:#{host},sheep},#{!=:#{SSH_CONNECTION},}}"

%if #{==:#{TERM},linux}
set -g status-fg color7
set -g status-bg color0

set -g window-status-format "#I:#W#F"
set -g window-status-current-style fg=color15,bold
set -g window-status-activity fg=color1
set -g window-status-separator ' '

set -g message-command-style bg=color0,fg=color15
set -g message-style bg=color0,fg=color15
set -g mode-style bg=color15,fg=color0

set -g pane-border-style bg=color0,fg=color7
set -g pane-active-border-style bg=color0,fg=color15

set -g display-panes-colour color7
set -g display-panes-active-colour color15
%else
source-file ~/.config/tmux/theme.conf

set -g @window-status-format " #I:#[fg=default]#W:#[fg=default]#{?synchronize-panes,~,}#{window_flags}#{?monitor-activity,A,} "
set -g window-status-format "#{E:@window-status-format}"
set -g window-status-current-format "#{E:@window-status-format}"

set -g window-status-activity-style bold,bg=color191,fg=color0
set -g window-status-bell-style bold,bg=color220,fg=color196
set -g window-status-separator ''

set -g pane-border-indicators arrows
set -g pane-border-lines single
set -g pane-border-format " #{pane_index}:#{?pane_last,-,} #W:#T @ #{pane_tty} "

set -g message-command-style bg=color254,fg=color250
set -g message-style bg=color220,fg=color236
set -g mode-style bg=color220,fg=color236

set -g copy-mode-match-style bg=#fdef39,fg=#000000
set -g copy-mode-current-match-style bg=#fdef39,fg=#000000
%endif

set -g status-left "[#S#{?destroy-unattached,:T,}#{?#{||:#{==:#{session_group},},#{==:#{session_group},#{session_name}}},, (#{session_group})}]"
set -g status-left-length 0
set -g status-right "#{?#{==:#{@status-mail},},,[#{E:@status-mail}] }%a, %b %d %R"
set -g status-right-length 0

set -gF @status-mail-unread-style "#{window-status-bell-style}"
set -g @status-mail-unread-silent-style fg=color34,bold

# sort /[^ ]* [^ ]* \zs/
set -g aggressive-resize on
set -g bell-action server-other
set -g clock-mode-style 24
set -g default-command "$SHELL" # Disable login shells.
set -g default-terminal "$TERM"
set -g detach-on-destroy no-detached
set -g display-time 0
set -g escape-time 0
set -g focus-events on
set -g history-limit 20000
set -gF prefix "#{?@nested,C-b,C-t}"
set -g renumber-windows on
set -g repeat-time 418
set -g set-titles on
set -g set-titles-string '[#S]:#W #T'
set -g status-interval 20
set -g status-keys emacs
set -ga terminal-overrides ",*:Tc" # True color.
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q' # Cursor shape.
set -g update-environment 'DISPLAY EDITOR PATH TERMINAL' # SSH_AUTH_SOCK is in the global environment.
set -g visual-bell both

set-hook -g after-split-window[1] { select-layout tiled }
set-hook -g window-layout-changed[2] { set -wF pane-border-status '#{?#{==:#{window_panes},1},off,bottom}' }

unbind -a

set -g mode-keys vi
set -g editor nvim

bind : command-prompt
bind d detach-client

bind c new-window -a -t : -c "#{pane_current_path}"
bind s split-window -c "#{pane_current_path}"
bind C command-prompt -p '(new-session)' { new-session -s '%%' }
bind G command-prompt -p '(new-session in group)' {
	run-shell "\
		tmux new-session -d -t #{?#{session_group},#{session_group},#{session_name}} -s '%%' \\;\
		switch-client -t '%%'\
	"
}
bind X if -F '#{>:#{session_group_size},1}' { kill-session } { confirm-before kill-session }

bind C-p display-popup -E progress -M
bind C-s display-popup -E ~/.config/heawm/quickstart

bind $ command-prompt -I '#S' -p '(rename-session)' { rename-session -- '%%' }
bind , command-prompt -I '#W' -p '(rename-window)' { rename-window -- '%%' }

bind C-c display-menu -T 'Kill' \
	'INT'  i { run-shell "ps ho tpgid #{pane_pid} | xargs -r kill -INT " } \
	'STOP' s { run-shell "ps ho tpgid #{pane_pid} | xargs -r kill -TSTP" } \
	'TERM' t { run-shell "ps ho tpgid #{pane_pid} | xargs -r kill -TERM" } \
	'CONT' c { run-shell "ps ho tpgid #{pane_pid} | xargs -r kill -CONT" } \
	'KILL' K { run-shell "ps ho tpgid #{pane_pid} | xargs -r kill -KILL" } \
	'HUP'  H { kill-pane } \

bind t last-pane
bind C-t last-window
bind T switch-client -l

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind 0 select-window -t:=0
bind 1 select-window -t:=1
bind 2 select-window -t:=2
bind 3 select-window -t:=3
bind 4 select-window -t:=4
bind 5 select-window -t:=5
bind 6 select-window -t:=6
bind 7 select-window -t:=7
bind 8 select-window -t:=8
bind 9 select-window -t:=9

bind n next-window
bind p previous-window
bind '!' next-window -a

bind H swap-pane -dt '{left-of}'
bind J swap-pane -dt '{down-of}'
bind K swap-pane -dt '{up-of}'
bind L swap-pane -dt '{right-of}'

bind N swap-window -dt :+1
bind P swap-window -dt :-1

bind ) switch-client -n
bind ( switch-client -p

bind g display-panes -d0
bind f display-popup -E ~/.config/tmux/find
bind F choose-tree -Z

bind "'" select-pane -m
bind C-z resize-pane -Z

bind ' ' display-menu -T 'Layout' \
	'k-master' k { select-layout main-horizontal } \
	'h-master' h { select-layout main-vertical } \
	'grid' g { select-layout tiled } \
	'row' r { select-layout even-horizontal } \
	'column' c { select-layout even-vertical } \

bind W if -F '#{@title}' \
	{ set -wu @title   ; set -w window-status-format "#{E:@window-status-format}" } \
	{ set -w  @title 1 ; set -w window-status-format "#{E:@window-status-format}#T" } \;\
	set -w window-status-current-format "#{E:window-status-format}"

bind > send-keys -t :muck C-m
bind . send-keys -t :muck c

bind M if -F '#{!=:#{window_name},muck}' {
	set -F @last_session "#{session_name}" ;
	select-pane -m ;
	attach-session -t home ;
	select-window -t muck
} {
	run-shell "tmux switch-client -t #{@last_session}"
}

bind r source-file ~/.tmux.conf \; display-message -d250 "Reloaded."

bind / set -s @copy_feedkeys '?' \; source ~/.config/tmux/editor-copy.tmux
bind C-u copy-mode \; send-keys -X halfpage-up
bind v set -s @copy_feedkeys 'v' \; source ~/.config/tmux/editor-copy.tmux
bind y set -su @copy_feedkeys \; source ~/.config/tmux/editor-copy.tmux
bind e capture-pane -J -S- \; split-window -vZ "tmux show-buffer | sed 's/\\s*$//' | nvim +normal!G{}k"

bind -T copy-mode-vi [ send-keys -X previous-prompt
bind -T copy-mode-vi ] send-keys -X next-prompt
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi + \
	send-keys -X copy-selection-and-cancel \;\
	run-shell -b "tmux show-buffer | xclip -silent -i -selection clipboard"
bind -T copy-mode-vi C-v \
	capture-pane -e -J -S- \;\
	set -F @_ '
		call cursor(#{history_size} + 1 - #{scroll_position} + #{copy_cursor_y}, 0)|
		call cursor(0, virtcol2col(0, line("."), #{copy_cursor_x} + 1))|
		let @/="#{pane_search_string}"|
		let v:hlsearch = 1
	' \;\
	split-window -Z 'tmux show-buffer | nvim +AnsiEsc "+$(tmux display-message -pF "#{@_}")"'

bind a paste-buffer -p
bind A paste-buffer
bind b choose-buffer { paste-buffer -b '%%' -p }
bind B choose-buffer
bind C-l clear-history \; display-message "History cleared."
bind C-m show-messages

bind * set -s @xclip_selection primary   \; source ~/.config/tmux/xclip.tmux
bind + set -s @xclip_selection clipboard \; source ~/.config/tmux/xclip.tmux

bind '~' set -w synchronize-panes
bind m set -w monitor-activity \; if -F '#{monitor-activity}' 'last-window'

# vim: ft=tmux fdm=marker
