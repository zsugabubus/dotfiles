#!/usr/bin/sh
default_cmd=2w
files="$HOME/.tikal/* ${XDG_CONFIG_HOME:-$HOME/.config}/tikal/*"

if test "$1" = "-h"; then
P() {
	echo "$(tput smul)$(tput bold)$1$(tput sgr0)"
}

exec cat <<USAGE
$(P NAME)
  tical -- text calendar

$(P SYNOPSYS)
  ${0##*/} [ [OPTION] | -h ]

$(P OPTIONS)
  [N][wmqhy] show events in N (default=1) weeks/months/quarter-/half-/years
  d          show origin of events

  -h         display this help and exit

  Default: $default_cmd

$(P CONFIGURATION)
  $(date +%F)     @$(date --date=@$(( $(date +%s) + 60 )) +%H:%M) Install ${0##*/}
  $(date +%F)w    Weekly event
  ^XXX Event on 
  \$ \e[1;31mweeks
  $(date +%F)ew   even
  $(date +%F)ow   odd

  # New file
  $(date +%F)m    Monthly event
  $(date +%F)y    Annual event
  $(date +%F)<    Interesting event in the past

$(P FILES)
$(printf '  %s\n' $files)

$(P COPYRIGHT)
  Public domain.
USAGE
fi

exec gawk "-vcmd=${1:-$default_cmd}" -f - <<"AWK" $files
function cmp(i1, v1, i2, v2) {
	return dates[i1]["days"] - dates[i2]["days"]
}

function datesub(x, n) {
	if (match(cmd, "[0-9]*" x)) {
		cmd = substr(cmd, 1, RSTART - 1) ((1 < RLENGTH ? substr(cmd, RSTART, RLENGTH - 1) : 1) * n) substr(cmd, RSTART + RLENGTH)
		return 1
	}
}

BEGINFILE {
	if (ERRNO)
		nextfile;
	prefix = ""
	postfix = ""
}

BEGIN {
	datesub("w", 7) ||
	datesub("m", 30) ||
	datesub("q", 366 / 4) ||
	datesub("h", 366 / 2) ||
	datesub("y", 366)

	IFS="\t"
	D = 24 * 60 * 60
	W = 7 * D

	delete dates

	$1 = strftime("%Y %m %d")
	now_year = substr($1, 1, 4)
	now_mon  = substr($1, 6, 2)
	now_mday = substr($1, 9, 2)
	now = mktime(now_year " " now_mon " " now_mday " 00 00 00 GMT", 1)
}

/^\^/ {
	prefix = substr($0, 2)
}

/^\$/ {
	postfix = substr($0, 2)
}

/^[0-9]/ {
	year = substr($1, 1, 4)
	mon  = substr($1, 6, 2)
	mday = substr($1, 9, 2)

	flags = substr($1, 11)
	repeat = 0
	date = 0

	if (flags ~ /y/) {
		if (year)
			repeat = now_year - year
		year = now_year + (mon < now_mon || (mon == now_mon && mday < now_mday))
	} else if (flags ~ /w/) {
		date = mktime(year " " mon " " mday " 00 00 00 UTC", 1)
		repeat = int((now - date + W - 1) / W)
		if (0 <= repeat) {
			if (flags ~ /e/) {
				repeat += strftime("%w", now) % 2 != 0
			} else if (flags ~ /o/) {
				repeat += strftime("%w", now) % 2 != 1
			}

			date = date + repeat * W
		}
	} else if (flags ~ /m/) {
		mon = now_mon + (mday < now_mday)
		year = now_year + (12 < mon)
		mon = (mon - 1) % 12 + 1
	}

	if (!date)
		date = mktime(year " " mon " " mday " 00 00 00 UTC", 1)

	$1 = ""

	if (!$0) {
		$0 = last_text
	} else {
		text = prefix substr($0, 2) postfix
		# Remove extra delimiter after $1.
		gsub(/\\e/, "\033", text)
		if (cmd ~ /d/)
			text = text "\t(from " FILENAME ":" FNR ")"
	}

	days = int((date - now) / D)
	if ((flags ~ /</ || 0 <= days) && (days <= int(substr(cmd, match(cmd, /[0-9]+/), RLENGTH)))) {
		i = length(dates);
		dates[i]["start"] = date
		dates[i]["days"] = days
		dates[i]["text"] = text
		dates[i]["repeat"] = repeat
	}

	last_text = text
}

END {
	PROCINFO["sorted_in"] = "cmp"
	for (i in dates) {
		repeat = dates[i]["repeat"]

		text = dates[i]["text"]
		if (match(text, "%"))
			sub(/%/, repeat, text)

		days = dates[i]["days"]
		if (days == 0)
			days = "\033[1mtoday\033[m"
		else if (days == 1)
			days = "\033[1mtomorrow\033[m"
		else {
			days = "in \033[1m" days "\033[m days"
		}
		print sprintf("%-19s", days) text "\033[m"
	}
	exit length(dates) ? 0 : 1
}
AWK
# vim:ft=awk
